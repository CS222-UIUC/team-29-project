name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libffi-dev
    
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      working-directory: ./backend
      run: poetry install --no-interaction
    
    - name: Check code formatting and linting with Ruff
      working-directory: ./backend
      run: |
        poetry run ruff check .
        poetry run ruff format . --check
    
    - name: Run standard tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test_secret_key' }}
      working-directory: ./backend
      run: poetry run pytest -v -m "not security and not integration"
      
    - name: Run security tests
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test_secret_key' }}
      working-directory: ./backend
      run: poetry run pytest -v -m "security"
      
    # --- Integration Tests ---
    # Run only on main branch, requires docker-compose to bring up DB
    - name: Run integration tests
      if: github.ref == 'refs/heads/main'
      env:
        # These env vars are primarily for docker-compose to pass INTO the backend container
        # based on the docker-compose.yml environment definitions.
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test_secret_key' }}
        # MONGODB_URI is defined IN docker-compose.yml for the container network ('mongodb://mongo:27017/threadflow')
        # No need to override it here unless compose file uses variable substitution for it.
      working-directory: . # Run docker-compose from the project root
      run: |
        echo "Starting services for integration tests..."
        # Use --build to ensure the image reflects current code changes
        # docker-compose automatically reads env vars from the step's environment
        # and passes them to containers based on the 'environment' section in docker-compose.yml
        # Use || for fallback between compose v2 and v1 syntax
        docker compose up --build -d backend mongo || docker-compose up --build -d backend mongo

        echo "Waiting for services to be ready..."
        sleep 55

        echo "Running integration tests inside the backend container..."
        
        # -T disables pseudo-tty allocation, good for CI
        docker compose exec -T backend poetry run pytest -v -m "integration" || docker-compose exec -T backend poetry run pytest -v -m "integration"

        echo "Stopping services..."
        # Use 'docker compose down' to stop and remove containers, networks.
        # Run this regardless of test success/failure.
        docker compose down --volumes || docker-compose down --volumes # --volumes removes the mongo-data volume